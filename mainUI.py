# Form implementation generated from reading ui file '.\main.ui'
#
# Created by: PyQt6 UI code generator 6.1.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import json
from types import DynamicClassAttribute
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMessageBox, QDialogButtonBox, QPushButton
from VisualizeData import Ui_Form
from types import DynamicClassAttribute
from PyQt6 import QtCore, QtGui, QtWidgets
from datetime import date
import sys
import os

class Ui_MainWindow(object):
    
    def __init__(self):
        self.file_path = 'data\\dhan-rashi.json'
        self.fSize = os.path.getsize(self.file_path)
        self.first_time = False
        
    def save_data(self, jsData):
        with open(self.file_path, 'r+') as jsFileObj:
            data = json.load(jsFileObj)
            last_entry_from_input = list(jsData.keys())[-1]
            print(jsData[last_entry_from_input])
            last_entry_from_data = list(data.keys())[-1]
            entry_no_input =  int(last_entry_from_input[6:])
            entry_no_data = 0
            if last_entry_from_data == 'basics':
                if entry_no_input == 1:
                    jsFileObj.seek(0,0)
                    json.dump(jsData, jsFileObj)
                    return "The data was saved successfully as entry number 1"
                else:
                    return "The file does not have first entry"
            elif 'entry_' in last_entry_from_data:
                if entry_no_data < entry_no_input:
                    jsFileObj.seek(0,0)
                    json.dump(jsData, jsFileObj)
                    return f"The data was saved successfully as entry number {entry_no_input}"
                else:
                    return "The cannot be entered as the entry number of the inputed data is greater than the last entry number"
            else:
                return "The file is not ready to store this data"
            
    def checkIfBasicInput(self):
        with open(self.file_path, 'r+') as jsFile:
            jsData = json.load(jsFile)
            if self.fSize == 0 or self.fSize == 2:
                self.first_time = True
            if self.first_time == True:
                self.widget.setEnabled(True)
            elif self.first_time == False:
                self.tabWidget1.setCurrentIndex(1)
                self.widget.setEnabled(False)
                self.saveButton.setEnabled(False)
                self.totalMoneyInput.setText(str(jsData['basics']['total']))
                if jsData['basics']['monthly_savings'] != 0:
                    self.savingsTypeCombo.setCurrentIndex(1)
                elif jsData['basics']['daily_savings'] != 0:
                    self.savingsTypeCombo.setCurrentIndex(2)
                else:
                    self.savingsTypeCombo.setCurrentIndex(0)

    def get_basic_input(self):
        errorMsg = QMessageBox()
        errorMsg.setWindowTitle("Error")
        errorMsg.setText("Some input is expected")
        try:
            saving_type = self.savingsTypeCombo.currentText()
            monthly_savings = 0
            daily_savings = 0
            random = True
            total = int(self.totalMoneyInput.text())          
            if saving_type == 'Random':
                monthly_savings = 0
                daily_savings = 0
                random = True
            elif saving_type == 'Monthly':
                monthly_savings = int(self.savings.text())
                daily_savings = 0
                random = False
            elif saving_type == 'Daily':
                daily_savings = int(self.savings.text())
                monthly_savings = 0
                random = False
            basic_data = {"basics": {'total': total, 'monthly_savings': monthly_savings, 'daily_savings': daily_savings}}
            with open(self.file_path, 'w') as jsObj:
                json.dump(basic_data, jsObj)
            confirmationMsg = QMessageBox()
            confirmationMsg.setWindowTitle("Confirmation")
            confirmationMsg.setText("The data was saved successfully")
            _ = confirmationMsg.exec()
            self.tabWidget1.setCurrentIndex(1)
            return basic_data
        except ValueError:
            _ = errorMsg.exec()
        
    def get_daily_input(self):
        total_left = 0
        add_savings = 0
        withd_savings = 0
        total_left = int(self.total_left_input.text())
        add_savings = int(self.add_savings.text())
        withd_savings = int(self.withd_savings.text())
        with open(self.file_path, 'r') as jsFile:
            data = json.load(jsFile)
            key = list(data.keys())[-1]
            key_no = key[6:]
            total = data['basics']['total']
            monthly_savings = data['basics']['monthly_savings']
            daily_savings = data['basics']['daily_savings']
        today = date.today()
        daily_data = {'key_no':key_no ,'today': today, 'total': total, 'total_left': total_left, 'add_savings': add_savings, 'withd_savings': withd_savings}
        return daily_data

    def evaluate_data(self, data):
        with open(self.file_path, 'r') as jsFile:
            jsData = json.load(jsFile)
            gained = 0
            spent = 0
            saved_today = data['add_savings']
            withdrawed = data['withd_savings']
            key = list(jsData.keys())[-1]
            if key == 'basics':
                total = data['total']
                date = str(data['today'])
                total_left_to_spend = data['total']
                saving_total = data['add_savings']
                total_spent = 0
                if data['total_left'] > data['total']:
                    gained = data['total_left'] - data['total']
                elif data['total'] > data['total_left']:
                    spent = data['total'] - data['total_left']
                    total_spent = spent
                if data['add_savings'] != 0:
                    total_left_to_spend = data['total'] - ((spent + data['add_savings']) - gained)
                jsData['entry_1'] = {
                                    "date": date,
                                    "spent": spent,
                                    "gained": gained,
                                    "saved_today": saved_today,
                                    "withdrawed": withdrawed,
                                    "savings_total": saving_total,
                                    "total_left_to_spend": total_left_to_spend,
                                    "total": total,
                                    "total_spent": total_spent
                                    }
            elif key != 'basics' and 'entry_' in key:
                last_entry_no = int(key[6:])
                current_entry_no = last_entry_no + 1
                date = str(data['today'])
                total_spent = jsData[key]['total_spent']
                total_left_to_spend = jsData[key]['total_left_to_spend']
                savings_total = jsData[key]['savings_total']
                if data['total_left'] > total_left_to_spend:
                    gained = data['total_left'] - total_left_to_spend
                elif total_left_to_spend > data['total_left']:
                    spent = jsData[key]['total_left_to_spend'] - data['total_left']
                    total_spent += spent
                if data['add_savings'] != 0:
                    total_left_to_spend -= ((spent + data['add_savings']) - gained)
                elif data['withd_savings'] != 0:
                    total_left_to_spend += ((data['withd_savings'] + gained) - spent)
                savings_total = savings_total + (data['add_savings'] - data['withd_savings'])
                total = data['total']
                jsData[f'entry_{current_entry_no}'] = {
                                                    "date": date,
                                                    "spent": spent,
                                                    "gained": gained,
                                                    "saved_today": saved_today,
                                                    "withdrawed": withdrawed,
                                                    "savings_total": savings_total,
                                                    "total_left_to_spend": total_left_to_spend,
                                                    "total": total,
                                                    "total_spent": total_spent
                                                    }
        return jsData
    
    def get_savings_type(self):
        savings_type = self.savingsTypeCombo.currentText()
        print(savings_type)
        if savings_type != 'Random':
            self.savings.setEnabled(True)
        elif savings_type == 'Random':
            self.savings.setEnabled(False)
            
    def save_daily_input(self):
        data = self.get_daily_input()
        jsData = self.evaluate_data(data)
        self.save_data(jsData)
        confirmationMsg = QMessageBox()
        confirmationMsg.setWindowTitle("Confirmation")
        confirmationMsg.setText(f"The data was successfully saved as entry number {str(int(data['key_no']) + 1)}")
        _ = confirmationMsg.exec()
        
    def removeData(self):
        warningMsg = QMessageBox()
        warningMsg.setWindowTitle("Warning")
        warningMsg.setText("Warning all existing data will be removed")
        warningMsg.setStandardButtons(QMessageBox.StandardButton.Cancel | QMessageBox.StandardButton.Ok)
        warningMsg.setDefaultButton(QMessageBox.StandardButton.Cancel)
        rep = warningMsg.exec()
        if rep == QMessageBox.StandardButton.Ok:
            with open(self.file_path, 'w') as jsFile:
                json.dump({}, jsFile)
                self.widget.setEnabled(True)
                self.saveButton.setEnabled(True)
                self.totalMoneyInput.setText(None)
                self.savings.setText(None)
        elif rep == QMessageBox.StandardButton.Cancel:
            print("Canceled")
            
    def display_data(self):
        dateSelected = self.dateSelect.currentText()
        data = {}
        with open(self.file_path, 'r') as jsObj:
            jsData = json.load(jsObj)
            keys = list(jsData.keys())[1:]
            if dateSelected != "Most recent":
                for key in keys:
                    if jsData[key]['date'] == dateSelected:
                        data = jsData[key]
                        self.form = QtWidgets.QWidget()
                        self.uiVD = Ui_Form()
                        self.uiVD.setupUi(self.form, data)
                        self.form.show()
            elif dateSelected == "Most recent":
                key = keys[-1]
                data = jsData[key]
                self.form = QtWidgets.QWidget()
                self.uiVD = Ui_Form()
                self.uiVD.setupUi(self.form, data)
                self.form.show()
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(551, 592)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 551, 591))
        self.tabWidget.setStyleSheet("")
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.tabWidget1 = QtWidgets.QTabWidget(self.tab)
        self.tabWidget1.setGeometry(QtCore.QRect(40, 100, 461, 471))
        self.tabWidget1.setStyleSheet("background-color: rgb(239, 255, 97);")
        self.tabWidget1.setTabsClosable(False)
        self.tabWidget1.setObjectName("tabWidget1")
        self.tabWidgetPage1 = QtWidgets.QWidget()
        self.tabWidgetPage1.setObjectName("tabWidgetPage1")
        self.saveButton = QtWidgets.QPushButton(self.tabWidgetPage1)
        self.saveButton.setGeometry(QtCore.QRect(20, 280, 111, 51))
        self.saveButton.setStyleSheet("background-color: rgb(65, 255, 81);")
        self.saveButton.setObjectName("saveButton")
        self.RemoveButton = QtWidgets.QPushButton(self.tabWidgetPage1)
        self.RemoveButton.setGeometry(QtCore.QRect(300, 280, 111, 51))
        self.RemoveButton.setStyleSheet("background-color: rgb(255, 42, 42);")
        self.RemoveButton.setObjectName("RemoveButton")
        self.widget = QtWidgets.QWidget(self.tabWidgetPage1)
        self.widget.setGeometry(QtCore.QRect(10, 10, 431, 221))
        self.widget.setObjectName("widget")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(20, 120, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label.setFont(font)
        self.label.setStyleSheet("background-color: rgb(184, 249, 255);")
        self.label.setObjectName("label")
        self.totalMoneyLabel = QtWidgets.QLabel(self.widget)
        self.totalMoneyLabel.setGeometry(QtCore.QRect(20, 40, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.totalMoneyLabel.setFont(font)
        self.totalMoneyLabel.setStyleSheet("background-color: rgb(184, 249, 255);")
        self.totalMoneyLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.totalMoneyLabel.setObjectName("totalMoneyLabel")
        self.totalMoneyInput = QtWidgets.QLineEdit(self.widget)
        self.totalMoneyInput.setGeometry(QtCore.QRect(200, 40, 113, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.totalMoneyInput.setFont(font)
        self.totalMoneyInput.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.IBeamCursor))
        self.totalMoneyInput.setStyleSheet("")
        self.totalMoneyInput.setText("")
        self.totalMoneyInput.setMaxLength(24)
        self.totalMoneyInput.setPlaceholderText("")
        self.totalMoneyInput.setObjectName("totalMoneyInput")
        self.savingsTypeCombo = QtWidgets.QComboBox(self.widget)
        self.savingsTypeCombo.setGeometry(QtCore.QRect(200, 120, 111, 31))
        self.savingsTypeCombo.setStyleSheet("background-color: rgb(58, 245, 255);")
        self.savingsTypeCombo.setObjectName("savingsTypeCombo")
        self.savingsTypeCombo.addItem("")
        self.savingsTypeCombo.addItem("")
        self.savingsTypeCombo.addItem("")
        self.confirmButton = QtWidgets.QPushButton(self.widget)
        self.confirmButton.setGeometry(QtCore.QRect(340, 130, 75, 24))
        self.confirmButton.setStyleSheet("background-color: rgb(255, 100, 69);")
        self.confirmButton.setObjectName("confirmButton")
        self.savings = QtWidgets.QLineEdit(self.widget)
        self.savings.setEnabled(False)
        self.savings.setGeometry(QtCore.QRect(200, 180, 161, 31))
        self.savings.setObjectName("savings")
        self.tabWidget1.addTab(self.tabWidgetPage1, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.total_left_input = QtWidgets.QLineEdit(self.tab_3)
        self.total_left_input.setGeometry(QtCore.QRect(220, 30, 171, 41))
        self.total_left_input.setStyleSheet("background-color: rgb(184, 246, 255);")
        self.total_left_input.setObjectName("total_left_input")
        self.add_savings = QtWidgets.QLineEdit(self.tab_3)
        self.add_savings.setGeometry(QtCore.QRect(220, 140, 171, 41))
        self.add_savings.setStyleSheet("background-color: rgb(167, 254, 255);")
        self.add_savings.setObjectName("add_savings")
        self.saveDailyInput = QtWidgets.QPushButton(self.tab_3)
        self.saveDailyInput.setGeometry(QtCore.QRect(160, 350, 91, 51))
        self.saveDailyInput.setStyleSheet("background-color: rgb(116, 255, 66);")
        self.saveDailyInput.setObjectName("saveDailyInput")
        self.label_2 = QtWidgets.QLabel(self.tab_3)
        self.label_2.setGeometry(QtCore.QRect(20, 30, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.tab_3)
        self.label_3.setGeometry(QtCore.QRect(20, 150, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.withd_savings = QtWidgets.QLineEdit(self.tab_3)
        self.withd_savings.setGeometry(QtCore.QRect(220, 260, 171, 41))
        self.withd_savings.setStyleSheet("background-color: rgb(167, 254, 255);")
        self.withd_savings.setObjectName("withd_savings")
        self.label_4 = QtWidgets.QLabel(self.tab_3)
        self.label_4.setGeometry(QtCore.QRect(20, 260, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.tabWidget1.addTab(self.tab_3, "")
        self.widget_2 = QtWidgets.QWidget(self.tab)
        self.widget_2.setGeometry(QtCore.QRect(40, 0, 461, 101))
        self.widget_2.setStyleSheet("")
        self.widget_2.setObjectName("widget_2")
        self.underheaderLine = QtWidgets.QFrame(self.widget_2)
        self.underheaderLine.setGeometry(QtCore.QRect(0, 80, 461, 31))
        self.underheaderLine.setStyleSheet("color: rgb(8, 62, 255)")
        self.underheaderLine.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
        self.underheaderLine.setLineWidth(3)
        self.underheaderLine.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.underheaderLine.setObjectName("underheaderLine")
        self.headerLabel = QtWidgets.QLabel(self.widget_2)
        self.headerLabel.setGeometry(QtCore.QRect(0, 0, 461, 91))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.headerLabel.setFont(font)
        self.headerLabel.setLineWidth(2)
        self.headerLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.headerLabel.setObjectName("headerLabel")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.dateSelect = QtWidgets.QComboBox(self.tab_2)
        self.dateSelect.setGeometry(QtCore.QRect(150, 220, 211, 71))
        self.dateSelect.setObjectName("dateSelect")
        with open(self.file_path, 'r') as jsObj:
            jsData = json.load(jsObj)
            self.showDataButton = True
            if jsData != {}:
                last_key = list(jsData.keys())[-1]
                if last_key == 'basics':
                    self.dateSelect.setEnabled(False)
                elif 'entry_' in last_key:
                    self.dateSelect.addItem("")
                    for i in range(int(last_key[6:])):
                        self.dateSelect.addItem("")
        self.widget_3 = QtWidgets.QWidget(self.tab_2)
        self.widget_3.setGeometry(QtCore.QRect(40, 0, 461, 101))
        self.widget_3.setStyleSheet("")
        self.widget_3.setObjectName("widget_3")
        self.underheaderLine_2 = QtWidgets.QFrame(self.widget_3)
        self.underheaderLine_2.setGeometry(QtCore.QRect(0, 80, 461, 31))
        self.underheaderLine_2.setStyleSheet("color: rgb(8, 62, 255)")
        self.underheaderLine_2.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
        self.underheaderLine_2.setLineWidth(3)
        self.underheaderLine_2.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.underheaderLine_2.setObjectName("underheaderLine_2")
        self.headerLabel_2 = QtWidgets.QLabel(self.widget_3)
        self.headerLabel_2.setGeometry(QtCore.QRect(0, 0, 461, 91))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.headerLabel_2.setFont(font)
        self.headerLabel_2.setLineWidth(2)
        self.headerLabel_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.headerLabel_2.setObjectName("headerLabel_2")
        self.showData = QtWidgets.QPushButton(self.tab_2)
        self.showData.setGeometry(QtCore.QRect(180, 360, 151, 61))
        self.showData.setStyleSheet("background-color: rgb(137, 255, 116);")
        self.showData.setObjectName("showData")
        self.label_5 = QtWidgets.QLabel(self.tab_2)
        self.label_5.setGeometry(QtCore.QRect(110, 120, 301, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("background-color: rgb(188, 255, 235);")
        self.label_5.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.tabWidget.addTab(self.tab_2, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        self.tabWidget1.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.checkIfBasicInput()
        self.basicData = self.saveButton.clicked.connect(self.get_basic_input)
        self.RemoveButton.clicked.connect(self.removeData)
        self.confirmButton.clicked.connect(self.get_savings_type)
        self.saveDailyInput.clicked.connect(self.save_daily_input)
        self.showData.clicked.connect(self.display_data)
        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Cash Bank"))
        self.saveButton.setText(_translate("MainWindow", "Save?"))
        self.RemoveButton.setText(_translate("MainWindow", "Remove Existing!"))
        self.label.setText(_translate("MainWindow", "Type of Savings"))
        self.totalMoneyLabel.setText(_translate("MainWindow", "Total money"))
        self.totalMoneyInput.setInputMask(_translate("MainWindow", "999999999999999999999999"))
        self.savingsTypeCombo.setItemText(0, _translate("MainWindow", "Random"))
        self.savingsTypeCombo.setItemText(1, _translate("MainWindow", "Monthly"))
        self.savingsTypeCombo.setItemText(2, _translate("MainWindow", "Daily"))
        self.confirmButton.setText(_translate("MainWindow", "confirm"))
        self.savings.setInputMask(_translate("MainWindow", "999999999999999999999999"))
        self.savings.setPlaceholderText(_translate("MainWindow", "How much you want to save"))
        self.tabWidget1.setTabText(self.tabWidget1.indexOf(self.tabWidgetPage1), _translate("MainWindow", "basic first input"))
        self.saveDailyInput.setText(_translate("MainWindow", "Save"))
        self.label_2.setText(_translate("MainWindow", "Total left today"))
        self.label_3.setText(_translate("MainWindow", "Add to savings"))
        self.label_4.setText(_translate("MainWindow", "Withdraw from savings"))
        self.tabWidget1.setTabText(self.tabWidget1.indexOf(self.tab_3), _translate("MainWindow", "Daily input"))
        self.headerLabel.setText(_translate("MainWindow", "Cash Bank"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Data Input"))
        self.headerLabel_2.setText(_translate("MainWindow", "Cash Bank"))
        self.showData.setText(_translate("MainWindow", "Show data"))
        self.label_5.setText(_translate("MainWindow", "Select the date to view the data for"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Data view"))
        self.total_left_input.setInputMask(_translate("MainWindow", "999999999999999999999999"))
        self.add_savings.setInputMask(_translate("MainWindow", "999999999999999999999999"))
        self.withd_savings.setInputMask(_translate("MainWindow", "999999999999999999999999"))
        self.add_savings.setText(_translate("MainWindow", "0"))
        self.withd_savings.setText(_translate("MainWindow", "0"))
        with open(self.file_path, 'r') as jsObj:
            jsData = json.load(jsObj)
            keys = list(jsData.keys())
            if jsData != {}:
                last_key = list(jsData.keys())[-1]
                if last_key == 'basics':
                    self.dateSelect.setEnabled(False)
                    self.showData.setEnabled(False)
                elif 'entry_' in last_key:
                    self.dateSelect.setItemText(0, _translate("MainWindow", "Most recent"))
                    for key in keys[1:]:
                        date = jsData[key]['date']
                        print(date)
                        self.dateSelect.setItemText(keys.index(key), _translate("MainWindow", date))
                        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
